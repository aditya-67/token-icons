{"ast":null,"code":"var _jsxFileName = \"/Users/albertocevallos/Documents/active/skunk/token-icons/frontend/src/components/allLists.js\";\nimport React, { useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport FilterResults from 'react-filter-search';\nimport Card from './card';\nimport Search from './search';\nimport tokenLists from '../token-lists.json';\nimport { useMultiFetch } from '../utils/useMultiFetch'; // import { ListItem } from '../components/list-tokens'\n// import { toChecksumAddress } from 'ethereumjs-util'\n\nconst listIDs = Object.keys(tokenLists);\nconst StyledAllLists = styled.section`\n  min-height: 80vh;\n  width: 100%;\n  padding: 5rem 0 6rem 0;\n  display: grid;\n  gap: 24px;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  height: fit-content;\n  @media screen and (max-width: 960px) {\n    padding: 0;\n    align-items: flex-start;\n  }\n`;\nconst CardWrapper = styled.div`\n  display: grid;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  max-width: 720px;\n  min-width: 720px;\n  grid-gap: 1.5rem;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n\n  @media screen and (max-width: 1200px) {\n    max-width: initial;\n    min-width: initial;\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n\n  @media screen and (max-width: 960px) {\n    max-width: initial;\n    min-width: initial;\n    grid-template-columns: 1fr 1fr;\n  }\n\n  @media screen and (max-width: 414px) {\n    display: flex;\n    flex-wrap: wrap;\n    max-width: initial;\n    min-width: initial;\n    grid-template-columns: 1fr;\n  }\n`;\nconst AddButton = styled.button`\n  cursor: pointer;\n  border: 0.75px solid #131313;\n  width: 100%;\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: transparent;\n  border-radius: 8px;\n\n  a {\n    color: #1f1f1f;\n  }\n`;\nexport default function AllLists() {\n  const [value, setValue] = useState('');\n\n  function handleChange(e) {\n    const {\n      value\n    } = e.target;\n    setValue(value);\n  } // fetch lists\n\n\n  const lists = useMultiFetch(listIDs); // format list data for search, using names from fetched lists if available, while falling back to hard-coded names\n\n  const data = useMemo(() => listIDs.map(listID => {\n    var _lists$listID$list$na, _lists$listID$list;\n\n    return {\n      id: listID,\n      name: (_lists$listID$list$na = (_lists$listID$list = lists[listID].list) === null || _lists$listID$list === void 0 ? void 0 : _lists$listID$list.name) !== null && _lists$listID$list$na !== void 0 ? _lists$listID$list$na : tokenLists[listID].name\n    };\n  }), [lists]); // // the below is a naive way to get all tokens in all lists, unique by address\n  // const allTokensByListID = useMemo(\n  //   () =>\n  //     Object.keys(lists).map((listID) => {\n  //       const list = lists[listID]?.list\n  //       const tokensInList = (list?.tokens ?? []).reduce(\n  //         (accumulator, token) => ({ ...accumulator, [toChecksumAddress(token.address)]: token }),\n  //         {}\n  //       )\n  //       return tokensInList\n  //     }),\n  //   [lists]\n  // )\n  // const allTokens = useMemo(\n  //   () =>\n  //     Object.keys(allTokensByListID).reduce(\n  //       (accumulator, listID) => ({ ...accumulator, ...allTokensByListID[listID] }),\n  //       {}\n  //     ),\n  //   [allTokensByListID]\n  // )\n  // const tokenData = useMemo(\n  //   () =>\n  //     Object.keys(allTokens).map((tokenAddress) => ({\n  //       address: tokenAddress,\n  //       name: allTokens[tokenAddress]?.name ?? '',\n  //       symbol: allTokens[tokenAddress]?.symbol ?? '',\n  //     })),\n  //   [allTokens]\n  // )\n\n  return /*#__PURE__*/React.createElement(StyledAllLists, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    handleChange: handleChange,\n    value: value,\n    setValue: setValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FilterResults, {\n    value: value,\n    data: data,\n    renderResults: results => results.length === 0 ? 'None found!' : results.map(result => {\n      var _lists$result$id;\n\n      return /*#__PURE__*/React.createElement(Card, {\n        key: result.id,\n        id: result.id,\n        list: (_lists$result$id = lists[result.id]) === null || _lists$result$id === void 0 ? void 0 : _lists$result$id.list,\n        name: result.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 19\n        }\n      });\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    href: \"https://github.com/Uniswap/tokenlists-org/issues/new?assignees=&labels=list-request&template=add-list-request.md&title=Request%3A+add+%7BList+name%7D\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, \"+ add a list\")));\n}","map":{"version":3,"sources":["/Users/albertocevallos/Documents/active/skunk/token-icons/frontend/src/components/allLists.js"],"names":["React","useState","useMemo","styled","FilterResults","Card","Search","tokenLists","useMultiFetch","listIDs","Object","keys","StyledAllLists","section","CardWrapper","div","AddButton","button","AllLists","value","setValue","handleChange","e","target","lists","data","map","listID","id","name","list","results","length","result"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport styled from 'styled-components'\nimport FilterResults from 'react-filter-search'\n\nimport Card from './card'\nimport Search from './search'\nimport tokenLists from '../token-lists.json'\nimport { useMultiFetch } from '../utils/useMultiFetch'\n// import { ListItem } from '../components/list-tokens'\n// import { toChecksumAddress } from 'ethereumjs-util'\n\nconst listIDs = Object.keys(tokenLists)\n\nconst StyledAllLists = styled.section`\n  min-height: 80vh;\n  width: 100%;\n  padding: 5rem 0 6rem 0;\n  display: grid;\n  gap: 24px;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  height: fit-content;\n  @media screen and (max-width: 960px) {\n    padding: 0;\n    align-items: flex-start;\n  }\n`\n\nconst CardWrapper = styled.div`\n  display: grid;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  max-width: 720px;\n  min-width: 720px;\n  grid-gap: 1.5rem;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n\n  @media screen and (max-width: 1200px) {\n    max-width: initial;\n    min-width: initial;\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n\n  @media screen and (max-width: 960px) {\n    max-width: initial;\n    min-width: initial;\n    grid-template-columns: 1fr 1fr;\n  }\n\n  @media screen and (max-width: 414px) {\n    display: flex;\n    flex-wrap: wrap;\n    max-width: initial;\n    min-width: initial;\n    grid-template-columns: 1fr;\n  }\n`\n\nconst AddButton = styled.button`\n  cursor: pointer;\n  border: 0.75px solid #131313;\n  width: 100%;\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: transparent;\n  border-radius: 8px;\n\n  a {\n    color: #1f1f1f;\n  }\n`\n\nexport default function AllLists() {\n  const [value, setValue] = useState('')\n\n  function handleChange(e) {\n    const { value } = e.target\n    setValue(value)\n  }\n\n  // fetch lists\n  const lists = useMultiFetch(listIDs)\n\n  // format list data for search, using names from fetched lists if available, while falling back to hard-coded names\n  const data = useMemo(\n    () => listIDs.map((listID) => ({ id: listID, name: lists[listID].list?.name ?? tokenLists[listID].name })),\n    [lists]\n  )\n\n  // // the below is a naive way to get all tokens in all lists, unique by address\n  // const allTokensByListID = useMemo(\n  //   () =>\n  //     Object.keys(lists).map((listID) => {\n  //       const list = lists[listID]?.list\n  //       const tokensInList = (list?.tokens ?? []).reduce(\n  //         (accumulator, token) => ({ ...accumulator, [toChecksumAddress(token.address)]: token }),\n  //         {}\n  //       )\n  //       return tokensInList\n  //     }),\n  //   [lists]\n  // )\n  // const allTokens = useMemo(\n  //   () =>\n  //     Object.keys(allTokensByListID).reduce(\n  //       (accumulator, listID) => ({ ...accumulator, ...allTokensByListID[listID] }),\n  //       {}\n  //     ),\n  //   [allTokensByListID]\n  // )\n  // const tokenData = useMemo(\n  //   () =>\n  //     Object.keys(allTokens).map((tokenAddress) => ({\n  //       address: tokenAddress,\n  //       name: allTokens[tokenAddress]?.name ?? '',\n  //       symbol: allTokens[tokenAddress]?.symbol ?? '',\n  //     })),\n  //   [allTokens]\n  // )\n\n  return (\n    <StyledAllLists>\n      <Search handleChange={handleChange} value={value} setValue={setValue} />\n\n      {/* <h1>Lists</h1> */}\n\n      <CardWrapper>\n        <FilterResults\n          value={value}\n          data={data}\n          renderResults={(results) =>\n            results.length === 0\n              ? 'None found!'\n              : results.map((result) => (\n                  <Card key={result.id} id={result.id} list={lists[result.id]?.list} name={result.name} />\n                ))\n          }\n        />\n      </CardWrapper>\n\n      {/* {value?.length > 2 && (\n        <>\n          <h1>Tokens</h1>\n\n          <FilterResults\n            value={value}\n            data={tokenData}\n            renderResults={(results) =>\n              results.length === 0\n                ? 'None found!'\n                : results.map((data) => <ListItem key={data.address} token={allTokens[data.address]} />)\n            }\n          />\n        </>\n      )} */}\n\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/Uniswap/tokenlists-org/issues/new?assignees=&labels=list-request&template=add-list-request.md&title=Request%3A+add+%7BList+name%7D\"\n      >\n        <AddButton>+ add a list</AddButton>\n      </a>\n    </StyledAllLists>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
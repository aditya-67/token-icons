{"ast":null,"code":"//TODO: Should probably make this dynamic\n// const list =  require(\"./chain_list.json\"); \nimport list from \"./chain_list.json\";\nconst typedList = list;\nexport function lookUpchain(chainId) {\n  return typedList[chainId] || chainId;\n}\nexport function lookupScanner(chainId) {\n  switch (chainId) {\n    // Mainnet\n    case 1:\n      return \"https://etherscan.io/address/\";\n    // Polygon\n\n    case 137:\n      return \"https://polygonscan.com/address/\";\n    // Rinkeby\n\n    case 4:\n      return \"https://rinkeby.etherscan.io/address/\";\n    // Kovan\n\n    case 42:\n      return \"https://kovan.etherscan.io/address/\";\n    // goerli\n\n    case 420:\n      return \"https://goerli.etherscan.io/address/\";\n    // ropsten\n\n    case 3:\n      return \"https://ropsten.etherscan.io/address/\";\n    // arbitrum\n\n    case 42161:\n      return \"https://arbiscan.io/address/\";\n    // Optimism\n\n    case 10:\n      return \"https://optimistic.etherscan.io/address/\";\n    // Optimistic Kovan\n\n    case 69:\n      return \"https://kovan-optimistic.etherscan.io/address/\";\n\n    default:\n      return \"\";\n  }\n}","map":{"version":3,"sources":["/Users/albertocevallos/Documents/active/skunk/token-icons/src/utils/getChainId.ts"],"names":["list","typedList","lookUpchain","chainId","lookupScanner"],"mappings":"AAAA;AACA;AACA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,MAAMC,SAAe,GAAGD,IAAxB;AAEA,OAAO,SAASE,WAAT,CAAqBC,OAArB,EAAsC;AACzC,SAAOF,SAAS,CAACE,OAAD,CAAT,IAAsBA,OAA7B;AACH;AAED,OAAO,SAASC,aAAT,CAAuBD,OAAvB,EAAwC;AAC3C,UAAOA,OAAP;AACI;AACA,SAAK,CAAL;AACI,aAAO,+BAAP;AACJ;;AACA,SAAK,GAAL;AACI,aAAO,kCAAP;AACJ;;AACA,SAAK,CAAL;AACI,aAAO,uCAAP;AACJ;;AACA,SAAK,EAAL;AACI,aAAO,qCAAP;AACJ;;AACA,SAAK,GAAL;AACI,aAAO,sCAAP;AACJ;;AACA,SAAK,CAAL;AACI,aAAO,uCAAP;AACJ;;AACA,SAAK,KAAL;AACI,aAAO,8BAAP;AACJ;;AACA,SAAK,EAAL;AACI,aAAO,0CAAP;AACJ;;AACA,SAAK,EAAL;AACI,aAAO,gDAAP;;AACJ;AACI,aAAO,EAAP;AA7BR;AA+BH","sourcesContent":["//TODO: Should probably make this dynamic\n// const list =  require(\"./chain_list.json\"); \nimport list from \"./chain_list.json\"; \nconst typedList : any = list; \n\nexport function lookUpchain(chainId: string) {\n    return typedList[chainId] || chainId; \n}\n\nexport function lookupScanner(chainId: number) {\n    switch(chainId) {\n        // Mainnet\n        case 1: \n            return \"https://etherscan.io/address/\"; \n        // Polygon\n        case 137: \n            return \"https://polygonscan.com/address/\"; \n        // Rinkeby\n        case 4:\n            return \"https://rinkeby.etherscan.io/address/\"; \n        // Kovan\n        case 42: \n            return \"https://kovan.etherscan.io/address/\"; \n        // goerli\n        case 420: \n            return \"https://goerli.etherscan.io/address/\"; \n        // ropsten\n        case 3: \n            return \"https://ropsten.etherscan.io/address/\"; \n        // arbitrum\n        case 42161: \n            return \"https://arbiscan.io/address/\"; \n        // Optimism\n        case 10:\n            return \"https://optimistic.etherscan.io/address/\";\n        // Optimistic Kovan\n        case 69: \n            return \"https://kovan-optimistic.etherscan.io/address/\"\n        default:\n            return \"\" ;\n    }\n}"]},"metadata":{},"sourceType":"module"}
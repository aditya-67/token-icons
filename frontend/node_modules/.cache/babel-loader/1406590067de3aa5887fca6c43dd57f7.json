{"ast":null,"code":"import { useState, useEffect, useMemo } from 'react';\nexport function getListURLFromListID(listID) {\n  if (listID.startsWith('https://')) {\n    return listID;\n  } else if (listID === null || listID === void 0 ? void 0 : listID.endsWith('.eth')) {\n    // proxy http urls through a CF worker\n    return `https://wispy-bird-88a7.uniswap.workers.dev/?url=${`http://${listID}.link`}`;\n  } else {\n    throw Error(`Unrecognized listId ${listID}`);\n  }\n}\nexport function useMultiFetch(listIDs = []) {\n  const [lists, setLists] = useState({});\n  useEffect(() => {\n    if (listIDs.length > 0) {\n      let stale = false;\n      listIDs.forEach(listID => fetch(getListURLFromListID(listID)).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        return response.json();\n      }).then(list => {\n        if (!stale) {\n          setLists(lists => ({ ...lists,\n            [listID]: list\n          }));\n        }\n      }).catch(error => {\n        if (!stale) {\n          console.error(`Failed to fetch ${listID} at ${getListURLFromListID(listID)}`, error);\n          setLists(lists => ({ ...lists,\n            [listID]: null\n          }));\n        }\n      }));\n      return () => {\n        stale = true;\n        setLists({});\n      };\n    }\n  }, [listIDs]);\n  return useMemo(() => listIDs.reduce((accumulator, listID) => {\n    const list = lists[listID];\n    const loading = list === undefined;\n    const error = list === null;\n    return { ...accumulator,\n      [listID]: {\n        list,\n        loading,\n        error\n      }\n    };\n  }, {}), [listIDs, lists]);\n}","map":{"version":3,"sources":["/Users/albertocevallos/Documents/active/skunk/token-icons/src/utils/useMultiFetch.ts"],"names":["useState","useEffect","useMemo","getListURLFromListID","listID","startsWith","endsWith","Error","useMultiFetch","listIDs","lists","setLists","length","stale","forEach","fetch","then","response","ok","json","list","catch","error","console","reduce","accumulator","loading","undefined"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,OAA9B,QAA6C,OAA7C;AAQA,OAAO,SAASC,oBAAT,CAA8BC,MAA9B,EAAsD;AAC3D,MAAIA,MAAM,CAACC,UAAP,CAAkB,UAAlB,CAAJ,EAAmC;AACjC,WAAOD,MAAP;AACD,GAFD,MAEO,IAAIA,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEE,QAAR,CAAiB,MAAjB,CAAJ,EAA8B;AACnC;AACA,WAAQ,oDAAoD,UAASF,MAAO,OAAO,EAAnF;AACD,GAHM,MAGA;AACL,UAAMG,KAAK,CAAE,uBAAsBH,MAAO,EAA/B,CAAX;AACD;AACF;AAED,OAAO,SAASI,aAAT,CAAuBC,OAAiB,GAAG,EAA3C,EAAiF;AACtF,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAwC,EAAxC,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,OAAO,CAACG,MAAR,GAAiB,CAArB,EAAwB;AACtB,UAAIC,KAAK,GAAG,KAAZ;AAEAJ,MAAAA,OAAO,CAACK,OAAR,CAAiBV,MAAD,IACdW,KAAK,CAACZ,oBAAoB,CAACC,MAAD,CAArB,CAAL,CACGY,IADH,CACSC,QAAD,IAAc;AAClB,YAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,gBAAM,IAAIX,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,eAAOU,QAAQ,CAACE,IAAT,EAAP;AACD,OANH,EAOGH,IAPH,CAOSI,IAAD,IAAU;AACd,YAAI,CAACP,KAAL,EAAY;AACVF,UAAAA,QAAQ,CAAED,KAAD,KAAY,EAAE,GAAGA,KAAL;AAAY,aAACN,MAAD,GAAUgB;AAAtB,WAAZ,CAAD,CAAR;AACD;AACF,OAXH,EAYGC,KAZH,CAYUC,KAAD,IAAW;AAChB,YAAI,CAACT,KAAL,EAAY;AACVU,UAAAA,OAAO,CAACD,KAAR,CAAe,mBAAkBlB,MAAO,OAAMD,oBAAoB,CAACC,MAAD,CAAS,EAA3E,EAA8EkB,KAA9E;AACAX,UAAAA,QAAQ,CAAED,KAAD,KAAY,EAAE,GAAGA,KAAL;AAAY,aAACN,MAAD,GAAU;AAAtB,WAAZ,CAAD,CAAR;AACD;AACF,OAjBH,CADF;AAqBA,aAAO,MAAM;AACXS,QAAAA,KAAK,GAAG,IAAR;AACAF,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,OAHD;AAID;AACF,GA9BQ,EA8BN,CAACF,OAAD,CA9BM,CAAT;AAgCA,SAAOP,OAAO,CACZ,MACEO,OAAO,CAACe,MAAR,CAAe,CAACC,WAAD,EAAgDrB,MAAhD,KAA2D;AACxE,UAAMgB,IAAI,GAAGV,KAAK,CAACN,MAAD,CAAlB;AACA,UAAMsB,OAAO,GAAGN,IAAI,KAAKO,SAAzB;AACA,UAAML,KAAK,GAAGF,IAAI,KAAK,IAAvB;AACA,WAAO,EAAE,GAAGK,WAAL;AAAkB,OAACrB,MAAD,GAAU;AAAEgB,QAAAA,IAAF;AAAQM,QAAAA,OAAR;AAAiBJ,QAAAA;AAAjB;AAA5B,KAAP;AACD,GALD,EAKG,EALH,CAFU,EAQZ,CAACb,OAAD,EAAUC,KAAV,CARY,CAAd;AAUD","sourcesContent":["import { useState, useEffect, useMemo } from 'react'\n\ninterface ListReturn {\n  list: any | undefined | null // TODO replace any\n  loading: boolean\n  error: boolean\n}\n\nexport function getListURLFromListID(listID: string): string {\n  if (listID.startsWith('https://')) {\n    return listID\n  } else if (listID?.endsWith('.eth')) {\n    // proxy http urls through a CF worker\n    return `https://wispy-bird-88a7.uniswap.workers.dev/?url=${`http://${listID}.link`}`\n  } else {\n    throw Error(`Unrecognized listId ${listID}`)\n  }\n}\n\nexport function useMultiFetch(listIDs: string[] = []): { [listID: string]: ListReturn } {\n  const [lists, setLists] = useState<{ [url: string]: ListReturn['list'] }>({})\n\n  useEffect(() => {\n    if (listIDs.length > 0) {\n      let stale = false\n\n      listIDs.forEach((listID) =>\n        fetch(getListURLFromListID(listID))\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error('Network response was not ok')\n            }\n            return response.json()\n          })\n          .then((list) => {\n            if (!stale) {\n              setLists((lists) => ({ ...lists, [listID]: list }))\n            }\n          })\n          .catch((error) => {\n            if (!stale) {\n              console.error(`Failed to fetch ${listID} at ${getListURLFromListID(listID)}`, error)\n              setLists((lists) => ({ ...lists, [listID]: null }))\n            }\n          })\n      )\n\n      return () => {\n        stale = true\n        setLists({})\n      }\n    }\n  }, [listIDs])\n\n  return useMemo(\n    () =>\n      listIDs.reduce((accumulator: { [listID: string]: ListReturn }, listID) => {\n        const list = lists[listID]\n        const loading = list === undefined\n        const error = list === null\n        return { ...accumulator, [listID]: { list, loading, error } }\n      }, {}),\n    [listIDs, lists]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}